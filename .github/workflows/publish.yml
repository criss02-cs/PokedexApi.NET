name: publish
on:
  workflow_dispatch:   # allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'        # Run the workflow when pushing to the main branch
  pull_request:
    branches:
        - '*'           #Run the workflow for all pull requests
  release:
    types:
        - published     #Run the workflow when a new GitHub release is published

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_NOLOGO: true
    NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
    build:
      runs-on: ubuntu-latest    
      outputs:
        Version: ${{ steps.gitversion.outputs.SemVer }}
        CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}
      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0 #fetch-depth is needed for GitVersion
            
        #Install and calculate the new version with GitVersion  
        - name: Install GitVersion
          uses: gittools/actions/gitversion/setup@v0.9.7
          with:
            versionSpec: 5.x
        - name: Determine Version
          uses: gittools/actions/gitversion/execute@v0.9.7
          id: gitversion # step id used as reference for output values
        - name: Display GitVersion outputs
          run: |
            echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
            echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
        #Build/pack the project
        - name: Setup .NET
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: 6.0.x
        - name: Build and Pack NuGet package
          run: dotnet build -p:Version='${{ steps.gitversion.outputs.SemVer }}' -c Release --output ${{ env.NuGetDirectory }}
        - name: Upload NuGet package to GitHub
          uses: actions/upload-artifact@v3
          with:
            name: nuget
            if-no-files-found: error
            retention-days: 7
            path: ${{ env.NuGetDirectory }}/*.nupkg
    release:
      runs-on: ubuntu-latest
      needs: build
      if: github.ref == 'refs/heads/main' # only run job if on the master branch
      steps:
        - name: Download nuget package artifact
          uses: actions/download-artifact@v3
          with:
            name: nuget
            path: ${{ env.NuGetDirectory }}
        # Publish all NuGet packages to NuGet.org
        - name: Publish NuGet package
          run: |
            foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
            }
        # Create release
        - name: Create release
          if: needs.build.outputs.CommitsSinceVersionSource > 0 # Only release if there has been a commit/version change
          uses: ncipollo/release-action@v1
          with:
            tag: ${{ needs.build.outputs.Version }}
            name: Release ${{ needs.build.outputs.Version }}
            artifacts: "nuget"
            token: ${{ secrets.TOKEN }}
